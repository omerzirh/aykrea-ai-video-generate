const fs = require('fs');
const path = require('path');

// Path to the server.ts file
const serverFilePath = path.join(__dirname, 'server.ts');

// Read the server.ts file
let serverCode = fs.readFileSync(serverFilePath, 'utf8');

// New endpoint for retrieving user's generated content (both images and videos)
const newEndpoints = `
// Endpoint for retrieving user's generated videos
app.get('/api/user/videos', jsonBodyParser, authenticate, (req: Request, res: Response) => {
  (async () => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
      const user = authenticatedReq.user;
      
      // Get all videos generated by the user
      const videos = await getUserVideos(user.id);
      
      return res.json({ videos });
    } catch (error) {
      console.error('Error retrieving user videos:', error);
      return res.status(500).json({ error: 'Failed to retrieve user videos' });
    }
  })();
});

// Endpoint for retrieving user's generated images
app.get('/api/user/images', jsonBodyParser, authenticate, (req: Request, res: Response) => {
  (async () => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
      const user = authenticatedReq.user;
      
      // Get all images generated by the user
      const images = await getUserImages(user.id);
      
      return res.json({ images });
    } catch (error) {
      console.error('Error retrieving user images:', error);
      return res.status(500).json({ error: 'Failed to retrieve user images' });
    }
  })();
});

// Endpoint for retrieving all user's generated content (both images and videos)
app.get('/api/user/content', jsonBodyParser, authenticate, (req: Request, res: Response) => {
  (async () => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
      const user = authenticatedReq.user;
      
      // Get all content generated by the user
      const [videos, images] = await Promise.all([
        getUserVideos(user.id),
        getUserImages(user.id)
      ]);
      
      return res.json({ videos, images });
    } catch (error) {
      console.error('Error retrieving user content:', error);
      return res.status(500).json({ error: 'Failed to retrieve user content' });
    }
  })();
});
`;

// Find the position to insert the new endpoints (after the last existing endpoint)
const lastEndpointPos = serverCode.lastIndexOf('app.post');
const nextSectionPos = serverCode.indexOf('});', lastEndpointPos);
const insertPos = serverCode.indexOf('\n', nextSectionPos) + 1;

// Insert the new endpoints
serverCode = serverCode.slice(0, insertPos) + newEndpoints + serverCode.slice(insertPos);

// Update the image generation endpoint to store images in S3
// First, find the image generation code
const imageGenerationPattern = /\/\/ Handle Gemini API request for image generation[\s\S]*?const data = await response\.json\(\);[\s\S]*?return res\.json\({ images: data\.images \|\| \[\] }\);/g;
const updatedImageGeneration = `// Handle Gemini API request for image generation
    const response = await fetch(geminiApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: {
          text: prompt,
        },
        model: 'gemini-pro-vision',
      }),
    });

    if (!response.ok) {
      return res.status(response.status).json({ error: 'Failed to generate image with Gemini' });
    }

    const data = await response.json();
    
    // Store images in S3 and save metadata in Supabase
    const storedImages = [];
    
    if (data.images && data.images.length > 0) {
      // Update usage count
      await updateUsageCount(user.id, 'image');
      
      // Store each image in S3
      for (const imageUrl of data.images) {
        try {
          const imageData = await storeGeneratedImage(user.id, imageUrl, prompt);
          storedImages.push(imageData.url);
        } catch (storageError) {
          console.error('Error storing image:', storageError);
          // Fall back to the original URL if storage fails
          storedImages.push(imageUrl);
        }
      }
    }
    
    return res.json({ images: storedImages || [] });`;

// Replace the image generation code
serverCode = serverCode.replace(imageGenerationPattern, updatedImageGeneration);

// Write the updated code back to the file
fs.writeFileSync(serverFilePath, serverCode, 'utf8');

console.log('Server code updated successfully with new endpoints and image storage functionality!');

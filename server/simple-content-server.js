const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const { v4: uuidv4 } = require('uuid');
const fetch = require('node-fetch');
const AWS = require('aws-sdk');
require('dotenv').config();

const app = express();
const PORT = 3002;

// Initialize Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Initialize AWS S3
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION
});

const S3_BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME || 'videogenie-ai';

// CORS configuration
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// Body parser
app.use(express.json());

// Middleware to authenticate requests
const authenticate = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    res.status(401).json({ error: 'Missing or invalid authorization header' });
    return;
  }
  
  const token = authHeader.split(' ')[1];
  
  try {
    const { data: { user }, error } = await supabase.auth.getUser(token);
    
    if (error || !user) {
      res.status(401).json({ error: 'Invalid token' });
      return;
    }
    
    // Attach user to request
    req.user = user;
    next();
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(500).json({ error: 'Authentication failed' });
  }
};

// Function to get user's videos
async function getUserVideos(userId) {
  try {
    const { data, error } = await supabase
      .from('generated_videos')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching user videos:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in getUserVideos:', error);
    return [];
  }
}

// Function to get user's images
async function getUserImages(userId) {
  try {
    const { data, error } = await supabase
      .from('generated_images')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching user images:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in getUserImages:', error);
    return [];
  }
}

// Endpoint for retrieving user's generated videos
app.get('/api/user/videos', authenticate, async (req, res) => {
  try {
    const user = req.user;
    
    // Get all videos generated by the user
    const videos = await getUserVideos(user.id);
    
    res.json({ videos });
  } catch (error) {
    console.error('Error retrieving user videos:', error);
    res.status(500).json({ error: 'Failed to retrieve user videos' });
  }
});

// Endpoint for retrieving user's generated images
app.get('/api/user/images', authenticate, async (req, res) => {
  try {
    const user = req.user;
    
    // Get all images generated by the user
    const images = await getUserImages(user.id);
    
    res.json({ images });
  } catch (error) {
    console.error('Error retrieving user images:', error);
    res.status(500).json({ error: 'Failed to retrieve user images' });
  }
});

// Endpoint for retrieving all user's generated content (both images and videos)
app.get('/api/user/content', authenticate, async (req, res) => {
  try {
    const user = req.user;
    
    // Get all content generated by the user
    const [videos, images] = await Promise.all([
      getUserVideos(user.id),
      getUserImages(user.id)
    ]);
    
    res.json({ videos, images });
  } catch (error) {
    console.error('Error retrieving user content:', error);
    res.status(500).json({ error: 'Failed to retrieve user content' });
  }
});

// Helper function to upload a base64 image to S3
async function uploadBase64ImageToS3(base64Image, s3Key) {
  // Remove the data:image/png;base64, prefix
  const base64Data = base64Image.replace(/^data:image\/\w+;base64,/, '');
  const buffer = Buffer.from(base64Data, 'base64');
  
  const params = {
    Bucket: S3_BUCKET_NAME,
    Key: s3Key,
    Body: buffer,
    ContentType: 'image/png',
    ACL: 'public-read'
  };
  
  const uploadResult = await s3.upload(params).promise();
  return uploadResult.Location;
}

// Helper function to store image metadata in Supabase
async function storeImageMetadata(userId, imageUrl, promptText) {
  const imageId = uuidv4();
  
  const { data, error } = await supabase
    .from('generated_images')
    .insert({
      id: imageId,
      user_id: userId,
      url: imageUrl,
      prompt_text: promptText,
      created_at: new Date().toISOString()
    })
    .select()
    .single();
  
  if (error) {
    console.error('Error storing image metadata:', error);
    return null;
  }
  
  return data;
}

// Endpoint for storing generated images
app.post('/api/generate-image', authenticate, async (req, res) => {
  try {
    const { prompt, images } = req.body;
    const userId = req.user.id;
    
    if (!images || !Array.isArray(images) || images.length === 0) {
      return res.status(400).json({ error: 'No images provided' });
    }
    
    const storedImages = [];
    
    // Store each image in S3 and save metadata in Supabase
    for (const imageUrl of images) {
      try {
        // Upload the image to S3
        const s3Key = `images/${userId}/${uuidv4()}.png`;
        const s3Url = await uploadBase64ImageToS3(imageUrl, s3Key);
        
        // Store metadata in Supabase
        const imageData = await storeImageMetadata(userId, s3Url, prompt);
        
        if (imageData) {
          storedImages.push(imageData.url);
        } else {
          // Fall back to the original URL if metadata storage fails
          storedImages.push(s3Url);
        }
      } catch (error) {
        console.error('Error storing image:', error);
        // Fall back to the original URL if storage fails
        storedImages.push(imageUrl);
      }
    }
    
    res.json({ images: storedImages });
  } catch (error) {
    console.error('Error handling image storage:', error);
    res.status(500).json({ error: 'Failed to store images' });
  }
});

app.listen(PORT, () => {
  console.log(`Simple content server running on port ${PORT}`);
  console.log(`Content endpoint: http://localhost:${PORT}/api/user/content`);
});

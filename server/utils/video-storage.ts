import { v4 as uuidv4 } from 'uuid';
import { createClient } from '@supabase/supabase-js';
import { uploadFileFromUrl } from './s3';
import dotenv from 'dotenv';

dotenv.config();

// Initialize Supabase client
const supabaseUrl = process.env.VITE_SUPABASE_URL;
// For server-side operations, we should use the service role key to bypass RLS
// This is safe because it's only used on the server
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error('Supabase environment variables are missing');
}

// Create a Supabase client with the service role key to bypass RLS policies
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    persistSession: false, // Don't persist the session in the server environment
    autoRefreshToken: false,
  }
});

/**
 * Store a generated video in S3 and save its metadata in Supabase
 * @param userId User ID
 * @param videoUrl URL of the generated video
 * @param type Type of generation (e.g., 'image_to_video', 'text_to_video')
 * @param promptText Text prompt used for generation
 * @param hasPromptImage Whether an image prompt was used
 * @param aspectRatio Aspect ratio of the video
 * @returns The stored video data
 */
export async function storeGeneratedVideo(
  userId: string,
  videoUrl: string,
  type: 'image_to_video' | 'text_to_video',
  promptText: string,
  hasPromptImage: boolean = false,
  aspectRatio: string = '16:9'
): Promise<any> {
  try {
    // Generate a unique ID for the video
    const videoId = uuidv4();
    
    // Upload the video to S3
    const s3Key = `videos/${userId}/${videoId}.mp4`;
    const s3Url = await uploadFileFromUrl(videoUrl, s3Key);
    
    // Store video metadata in Supabase
    const { data, error } = await supabase
      .from('generated_videos')
      .insert({
        id: videoId,
        user_id: userId,
        url: s3Url,
        source_url: videoUrl,
        type,
        prompt_text: promptText || '',
        prompt_image: hasPromptImage,
        aspect_ratio: aspectRatio,
        created_at: new Date().toISOString(),
      })
      .select()
      .single();
    
    if (error) {
      console.error('Error storing video metadata:', error);
      // Return basic metadata even if database storage fails
      return {
        id: videoId,
        url: s3Url,
        type,
        prompt_text: promptText || '',
        created_at: new Date().toISOString(),
      };
    }
    
    return data;
  } catch (error) {
    console.error('Error storing generated video:', error);
    // Return the original URL if storage fails
    return { url: videoUrl };
  }
}

/**
 * Get all videos generated by a user
 * @param userId User ID
 * @returns Array of video metadata
 */
export async function getUserVideos(userId: string): Promise<any[]> {
  try {
    const { data, error } = await supabase
      .from('generated_videos')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching user videos:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in getUserVideos:', error);
    return [];
  }
}
